generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  content     String    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  comments    Comment[]

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          Role      @default(CUSTOMER)
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  ownedRooms    Room[]    @relation("RoomOwner")
  roomInvites   RoomInvite[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CUSTOMER
  DESIGNER
}

model Room {
  id            String    @id @default(cuid())
  owner         User      @relation("RoomOwner", fields: [ownerId], references: [id])
  ownerId       String
  createdAt     DateTime  @default(now())
  title         String    @default("Untitled")
  roomInvites   RoomInvite[]
}

model RoomInvite {
  id            String    @id @default(cuid())
  room          Room      @relation(fields: [roomId], references: [id])
  roomId        String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}
